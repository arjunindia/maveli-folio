---
import "@fontsource-variable/manrope";
import Navbar from "../components/Navbar.astro";
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <Navbar />
    <slot />
  </body>
</html>
<style is:global>
  html {
    font-family: system-ui, sans-serif;
    /* yellow gradient */
    background: #111;
    min-height: 100vh;
    margin: 0;
    padding: 0;
  }
  body {
    margin: 0;
    padding: 0;
    font-family: "Manrope Variable", sans-serif;
  }
  code {
    font-family:
      Menlo,
      Monaco,
      Lucida Console,
      Liberation Mono,
      DejaVu Sans Mono,
      Bitstream Vera Sans Mono,
      Courier New,
      monospace;
  }
  .yellow-orange {
    background-repeat: no-repeat;
    background-position: left 0% bottom 10%;
    background-image: linear-gradient(
      90deg,
      #dae601 0%,
      #dae601 7%,
      #e2cb07 7%,
      #e2cb07 14%,
      #eab00d 14%,
      #eab00d 21%,
      #f29412 21%,
      #f29412 28%,
      #fa7918 28%,
      #fa7918 100%
    );
    background-size: 1% 18%;
    transition: background-size 0.5s ease-in-out;
  }
  .yellow-orange-visible {
    background-size: 100% 15%;
    transition: background-size 0.5s ease-in-out;
  }
</style>
<script>
  if (typeof window !== "undefined") {
    // use IntersectionObserver to add a class to that when the yellow orange text is visible
    const text = document.querySelectorAll(".yellow-orange");
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("yellow-orange-visible");
          } else {
            entry.target.classList.remove("yellow-orange-visible");
          }
        });
      },
      { threshold: 0.5 }
    );
    text.forEach((t) => observer.observe(t));
  }
</script>
